// Function Declaration

// São duas as formas mais comunns de declaramos uma função. A que utilizamos até o momento é chamada de Function Declaration;

function somar(a, b) {
  return a + b;
}

somar(4, 2); //6

// Function Expression
/**
 * É criada a partir da declaração de uma variável, na qual assinalamos uma função. Essa função pode ser anônima ou nomeada. A mesma poderá ser ativada através da variável assinalada.
 */

const somar = function (a, b) {
  return a + b;
};

somar(4, 2); // 6;

//Quando usamos a function expression o hoisting já joga todo o corpo da declaração para cima no momento da declaração

//Arrow function
//Podemos criar utilizando arrow functions.

const somar = (a, b) => a + b;
somar(4, 2); //6

const quadrado = (a) => a * a;
quadrado(4);

//Estrutura / Preferência
//Geralmente o uso entre expression / declaration é uma questão de preferência. Function Expression força a criação da mesma antes de sua ativação, o que pode contribuir para um código mais estruturado.

//Declarado como método de window.
//Vaza o escopo de bloco, como se
//fosse criado utilizando var

function somar(a, b) {
  return a + b;
}

const dividir = (a, b) => a / b;

somar(4, 2);
dividir(4, 2);

// // IIFE - Immediately Invoked Function Expression
// Antes da introdução de modules e da implementação do escopo de
// bloco, a forma mais comum utilizada para isolarmos o escopo de um código Javascript era através das chamadas IIFE's.

var instrumento = "Violão";

(function () {
  // código isolado do escopo global
  var instrumento = "Guitarra";
  console.log(instrumento); // Guitarra
})();

console.log(instrumento); // Violão
