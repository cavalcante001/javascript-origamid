new promise()

// Promise é uma função construtora de promessas. Existem dois resultados possíveis de uma promessa, ela pode ser resolvida, com a execução do primeiro argumento, ou rejeitada se o segundo argumento for ativado.

const promessa = new promise(function(resolve, reject) {
    let condicao = true;
    if(condicao) {
        resolve();
    } else {
        reject();
    }
});

console.log(promessa); // Promise {<resolved>: undefined}

// podemos passar um argumento na função resolve(), este será enviado junto com a resolução da promise.

const promessa = new promise(function(resolve, reject) {
    let condicao = true;
    if(condicao) {
        resolve('Estou pronto!');
    } else {
        reject();
    }
});

// Quando a condição de resolução da promise não é atingida, ativamos a função reject para rejeitar a mesma. Podemos indicar no console um erro, informando que a promise foi rejeitada.

const promessa = new promise(function(resolve, reject) {
    let condicao = false;
    if(condicao) {
        resolve('Estou pronto!');
    } else {
        reject(Error('Um erro ocorreu.'));
    }
});

// then()
// o poder das promises está no método then() do seu protótipo. O Callback deste método só será ativado quando a promise for resolvida. O argumento da callbak será o valor passado na função resolve

const promessa = new promise(function(resolve, reject) {
    let condicao = false;
    if(condicao) {
        resolve('Estou pronto!');
    } else {
        reject(Error('Um erro ocorreu.'));
    }
});

promessa.then(function(resolucao)) {
    console.log(resolucao) // 'Estou pronto!
}

// Assíncrono
// As promessas não fazem sentido quando o código executado dentro da mesma é apenas código síncrono. O poder está na execução de código assíncrono que executará resolve() ao final dele.

const promessa = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve('Resolvida');
    }, 1000);
});

promessa.then(resolucao => {
    console.log(resolucao); //'Resolvida' após 1s
});

//then().then()
//O método then() retorna outra Promise. Podemos colocar then() após o then() e fazer um encadeamento de promessas. O valor do primeiro argumento de cada then, será o valor do retorno anterior.

const promessa = new Promise((resolve, reject) => {
    resolve('Etapa 1');
});

promessa.then(resolucao => {
    console.log(resolucao); //'Etapa 1'
    return 'Etapa 2';
}).then(resolucao => {
    console.log(resolucao); // 'Etapa 2';
    return 'Etapa 3';
}).then(r => r + 4)
.then(r=> {
    console.log(r); //etapa 34
});


// catch()
// O método catch(), do protótipo de Promises, adiciona um callback a promise que será ativado caso a mesma seja rejeitada.

const promesa = new Promise((resolve, reject) => {
    let condicao = false;
    if(condicao) {
        resolve('Estou pronto!');
    } else {
        reject(Error('Um erro ocorreu.'));
    }
});

promessa.then(resolucao => {
    console.log(resolucao);
}).catch(reject => {
    console.log(reject);
});

//then(resolve, reject)

//Podemos passar a função que será ativada caso a promise seja rejeitada, direto no método then, como segundo argumento.

const promesa = new Promise((resolve, reject) => {
    let condicao = false;
    if(condicao) {
        resolve('Estou pronto!');
    } else {
        reject(Error('Um erro ocorreu.'));
    }
});

promessa.then(resolucao => {
    console.log(resolucao);
}, reject => {
    console.log(reject);
});

//finally()
// finally() executará a função anônima assim que a promessa acabar. A diferença do finally é que ele será executado independentemente do resultado, se for resolvida ou rejeitada.


const promesa = new Promise((resolve, reject) => {
    let condicao = false;
    if(condicao) {
        resolve('Estou pronto!');
    } else {
        reject(Error('Um erro ocorreu.'));
    }
});

promessa.then(resolucao => {
    console.log(resolucao);
}, reject => {
    console.log(reject)
}).finally(() => {
    console.log('Finalizou');
});

// Promise.all()
//Retornará uma nova promise assim que todas as promises dentro dela forem resolvidas ou pelo menos uma rejeitada. A resposta é um array com as respostas de cada promise.

const Login = new Promise(resolve => {
    setTimeout(() => {
        resolve('Login efetuado');
    }, 1000);
});

const dados = new Promise(resolve => {
    setTimeout(() => {
        resolve('Dados Carregados');
    }, 1500);
});

const tudoCarregado = Promise.all([login, dados]);
tudoCarregado.then(respostas => {
    console.log(respostas) // Array com ambas respostas
});

//promise.race()
//Retornará uma nova promise assim que a primeira promise for resolvida ou rejeitada. Essa nova promise terá a resposta da primeira resolvida.

const Login = new Promise(resolve => {
    setTimeout(() => {
        resolve('Login efetuado');
    }, 1000);
});

const dados = new Promise(resolve => {
    setTimeout(() => {
        resolve('Dados Carregados');
    }, 1500);
});

const tudoCarregado = Promise.race([login, dados]);
tudoCarregado.then(resposta => {
    console.log(resposta) // Array com ambas respostas
});