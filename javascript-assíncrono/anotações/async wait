// async/await

// A palavra chave async indica que a função possui partes assíncronas e que você pretende esperar a resolução da mesma antes de continuar. O await irá indicar a promise que devemos esperar. Faz parte do ES8.

async function puxarDados() {
    const dadosResponse = await fetch('./dados.json');
    const dadosJson = wait dadosResponse.json();

    document.body.innerText = dadosJson.titulo;
}

puxarDados();

//then/async
// A diferença é uma sintaxe mais limpa.

// Para lidarmos com erros nas promises, podemos utilizar o try e o catch na função

async function puxarDados() {
    try {
        const dadosResponse = await fetch('./dados.json');
        const dadosJson = wait dadosResponse.json();
        document.body.innerText = dadosJson.titulo;
    } catch(erro) {
        console.log(erro);
    }
    
}

//Iniciar um fetch ao mesmo tempo
//Não precisamos esperar um fetch para começarmos outro. Porém precisamos esperar a resposta resolvida do fetch para transformarmos a response em json.

//Promise
// O resultado da expressão à frente de await tem que ser uma promise. E o retorno do await será sempre o resultado desta promise.